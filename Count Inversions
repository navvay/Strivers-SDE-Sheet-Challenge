#include <bits/stdc++.h> 
long long merge(long long *arr, int left, int right, int mid)
{
    vector<long long> temp;
    long long cnt = 0;
    int i = left, j = mid + 1;
    while (i <= mid && j <= right)
    {
        if (arr[i] <= arr[j])
        temp.push_back(arr[i++]);
        else {
          cnt += (mid - i + 1);
          temp.push_back(arr[j++]);
        }
    }

    while (i <= mid) temp.push_back(arr[i++]);
    while (j <= right) temp.push_back(arr[j++]);

    for (int i = left; i <= right; i++)
    {
        arr[i] = temp[i - left];
    }
    return cnt;
}

long long mergeSort(long long *arr, int left, int right)
{
    if (left >= right) return 0;
    long long cnt = 0;
    int mid = (left + right)/2;
    cnt += mergeSort(arr, left, mid);
    cnt += mergeSort(arr, mid+1, right);
    cnt += merge(arr, left, right, mid);

    return cnt;
}
long long getInversions(long long *arr, int n){
    return mergeSort(arr, 0, n-1);
    // Write your code here.
}
