bool possible(vector<vector<int>> &mat, int n, vector<int> &color, int node, int c)
{
    for (int i = 0; i < n; i++)
    {
        if (i != node && mat[i][node] == 1 && color[i] == c) return false;
    }
    return true;
}
bool coloring(vector<vector<int>> &mat, int n, int m, vector<int> &color, int node)
{
    if (node == n) return true;
    
    for (int c = 1; c <= m; c++)
    {
        if (possible(mat, n, color, node, c))
        {
            color[node] = c;
            if (coloring(mat, n, m, color, node+1))
            return true;
            color[node] = 0;
        }
    }
    return false;
}
string graphColoring(vector<vector<int>> &mat, int m) {
    int n = mat.size();
    vector<int> color(n, 0);
    return coloring(mat, n, m, color, 0) ? "YES" : "NO";
    // Write your code here
}
