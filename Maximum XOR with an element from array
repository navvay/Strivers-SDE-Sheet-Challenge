#include<bits/stdc++.h>
struct Node{
    Node *keys[2];
};

class Trie{
    private: Node* root;

    public: 
    Trie()
    {
        root = new Node();
    }

    void insert(int num)
    {
        Node *node = root;
        for (int i = 31; i >= 0; i--)
        {
            int bit = 1 & (num >> i);

            if (!node->keys[bit])
            {
                node->keys[bit] = new Node();
            }
            node = node->keys[bit];
        }
    }

    int findXOR(int num)
    {
        int ans = 0;
        Node* node = root;
        for (int i = 31; i >= 0; i--)
        {
            int bit = 1 & (num >> i);

            if (node->keys[!bit])
            {
                ans = ans | (1 << i);
                node = node->keys[!bit];
            }
            else
            {
                node = node->keys[bit];
            }
        }
        return ans;
    }
};

vector<int> maxXorQueries(vector<int> &arr, vector<vector<int>> &queries){
	//	Write your coode here.
	sort(arr.begin(), arr.end());

	vector<pair<int, pair<int, int>>> q;

	for (int i = 0; i < queries.size(); i++)
	{
		q.push_back({queries[i][1], {queries[i][0], i}});
	}

	sort(q.begin(), q.end());

	Trie obj;
	int ind = 0;

	vector<int> ans(q.size());

	for (auto it: q)
	{
		int xi = it.second.first, ai = it.first, qi = it.second.second;

		while (ind < arr.size() && arr[ind] <= ai)
		{
			obj.insert(arr[ind]);
			ind++;
		}
		if (ind == 0) ans[qi] = -1;
		else ans[qi] = obj.findXOR(xi);
	}

	return ans;
}
