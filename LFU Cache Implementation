#include <bits/stdc++.h> 
struct node{
    int key, value, cnt;
    node *next, *prev;
    node(int k, int v)
    {
        key = k;
        value = v;
        cnt = 1;
    }
};
struct List{
    int size;
    node *head, *tail;
    List()
    {
        head = new node(0, 0);
        tail = new node(0, 0);
        head->next = tail;
        tail->prev = head;
        size = 0;
    }

    void addFront(node *newnode)
    {
        node* temp = head->next;
        newnode->next = temp;
        newnode->prev = head;
        head->next = newnode;
        temp->prev = newnode;
        size++;
    }

    void removeNode(node *delnode)
    {
        node* delprev = delnode->prev;
        node* delnext = delnode->next;
        delprev->next = delnext;
        delnext->prev = delprev;
        size--;
    }
};
class LFUCache
{
public:
unordered_map<int, node*> keyNode;
unordered_map<int, List*> freqListMap;
int maxSizeCache, minFreq, curSize;
    LFUCache(int capacity)
    {
        maxSizeCache = capacity;
        minFreq = curSize = 0;
        // Write your code here.
    }

    void updateFreqListMap(node* Node)
    {
        keyNode.erase(Node->key);
        freqListMap[Node->cnt]->removeNode(Node);
        if (Node->cnt == minFreq && freqListMap[Node->cnt]->size == 0)
        minFreq++;

        List* nextHigherFreqList = new List();
        if (freqListMap.find(Node->cnt + 1) != freqListMap.end())
        nextHigherFreqList = freqListMap[Node->cnt + 1];

        Node->cnt++;
        nextHigherFreqList->addFront(Node);
        freqListMap[Node->cnt] = nextHigherFreqList;
        keyNode[Node->key] = Node;
    }
    int get(int key)
    {
        if (keyNode.find(key) == keyNode.end()) return -1;

        node* Node = keyNode[key];
        int val = Node->value;
        updateFreqListMap(Node);
        return val;
        // Write your code here.
    }

    void put(int key, int value)
    {
        if (maxSizeCache == 0) return;

        if (keyNode.find(key) != keyNode.end()){
            node *Node = keyNode[key];
            Node->value = value;
            updateFreqListMap(Node);
        }
        else
        {
            if (curSize == maxSizeCache)
            {
                List* list = freqListMap[minFreq];
                keyNode.erase(list->tail->prev->key);
                freqListMap[minFreq]->removeNode(list->tail->prev);
                curSize--;
            }
            curSize++;
            minFreq = 1;
            List* listFreq = new List();
            if (freqListMap.find(minFreq) != freqListMap.end())
            listFreq = freqListMap[minFreq];
            node* Node = new node(key, value);
            listFreq->addFront(Node);
            keyNode[key] = Node;
            freqListMap[minFreq] = listFreq;
        }
        // Write your code here.
    }
};
