#include<bits/stdc++.h>
class LRUCache
{
public:
class node{
    public: 
    int key, val;
    node *next, *prev;
    node (int k, int v){
        key = k;
        val = v;
    }
};

    node* head = new node(-1, -1);
    node* tail = new node(-1, -1);
    int cap;
    unordered_map<int, node*> mpp;

    LRUCache(int capacity)
    {
        cap = capacity;
        head->next = tail;
        tail->prev = head;
        // Write your code here
    }

void addnode(node* newnode)
{
    node *temp = head->next;
    newnode->next = temp;
    newnode->prev = head;
    head->next = newnode;
    temp->prev = newnode;
}

void deletenode(node* delnode)
{
    node* delprev = delnode->prev;
    node* delnext = delnode->next;
    delprev->next = delnext;
    delnext->prev = delprev;
}
    int get(int key)
    {
        if (mpp.find(key) == mpp.end()) return -1;

        node* resnode = mpp[key];
        int res = resnode->val;
        mpp.erase(key);
        deletenode(resnode);
        addnode(resnode);
        mpp[key] = head->next;
        return res;
        // Write your code here
    }

    void put(int key, int value)
    {
        if (mpp.find(key) != mpp.end()){
            node *existing = mpp[key];
            mpp.erase(key);
            deletenode(existing);
        }
        if (mpp.size() == cap){
            mpp.erase(tail->prev->key);
            deletenode(tail->prev);
        }
        addnode(new node(key, value));
        mpp[key] = head->next;
        // Write your code here
    }
};
