#include<bits/stdc++.h>
bool dfs(vector<int> adj[], vector<int> &vis, int node, int par)
{
    vis[node] = 1;

    for (auto it: adj[node])
    {
        //node is unvisited
        if (!vis[it])
        {
            if (dfs(adj, vis, it, node)) return true;
        }
        //node is visited
        else if (it != par)
        return true;
    }
    return false;
}

bool bfs(vector<int> adj[], vector<int> &vis, int node)
{
    vis[node] = 1;
    queue<pair<int, int>> q;
    q.push({node, -1});

    while (!q.empty())
    {
        auto it = q.front();
        q.pop();
        int n = it.first;
        int par = it.second;

        for (auto it: adj[n])
        {
            if (!vis[it])
            {
                q.push({it, n});
                vis[it] = 1;
            }
            else if (it != par) return true;
        }
    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    vector<int> adj[n + 1];
    for (auto it: edges)
    {
        adj[it[0]].push_back(it[1]);
        adj[it[1]].push_back(it[0]);        
    }
    vector<int> vis(n+1, 0);

    for (int i = 1; i <= n; i++)
    {
        if (!vis[i])
        {
            //dfs
            //if (dfs(adj, vis, i, -1)) return "Yes";
            //bfs
            if (bfs(adj, vis, i)) return "Yes";
        }
    }
    return "No";
    // Write your code here.
}
