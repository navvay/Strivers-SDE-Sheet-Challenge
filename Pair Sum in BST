#include <bits/stdc++.h> 
/**********************************************************

    Following is the Binary Tree Node structure:

    template <typename T>
    class BinaryTreeNode {
        public: 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };
***********************************************************/
void pushAll(BinaryTreeNode<int>* node, bool reverse, stack<BinaryTreeNode<int>*> &st)
{
    BinaryTreeNode<int>* it = node;
    while (it)
    {
        st.push(it);
        if (reverse) it = it->right;
        else it = it->left;
    }
}
int next(bool reverse, stack<BinaryTreeNode<int>*> &st)
{
    BinaryTreeNode<int>* node = st.top();
    st.pop();

    if (!reverse)
    pushAll(node->right, reverse, st);
    else 
    pushAll(node->left, reverse, st);
    return node->data;
}
bool pairSumBst(BinaryTreeNode<int> *root, int k)
{
    if (!root) return false;

    stack<BinaryTreeNode<int>*> l, r;
    pushAll(root, false, l);
    pushAll(root, true, r);


    int i = next(false, l), j = next(true, r);

    while (i < j)
    {
        if (i + j == k)
        return true; 
        else if (i + j < k) i = next(false, l);
        else j = next(true, r);
    }
    return false;
    // Write your code here
}
