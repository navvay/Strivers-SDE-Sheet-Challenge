/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
#include<bits/stdc++.h>
string serializeTree(TreeNode<int> *root)
{
 //    Write your code here for serializing the tree
    if (!root) return "";
    queue<TreeNode<int>*> q;

    q.push(root);
    string ans = "";

    while (!q.empty())
    {
        auto node = q.front();
        q.pop();

        if (!node) ans = ans + "#,";
        else {
            ans = ans + to_string(node->data) + ",";

            q.push(node->left);
            q.push(node->right);
        }
    }
    return ans;
}

TreeNode<int>* deserializeTree(string &serialized)
{
 //    Write your code here for deserializing the tree
    if (serialized.size() == 0) return NULL;

    stringstream s(serialized);
    string str;
    getline(s, str, ',');

    queue<TreeNode<int>*> q;
    TreeNode<int> *root = new TreeNode<int>(stoi(str));

    q.push(root);
    while (!q.empty())
    {
        auto node = q.front();
        q.pop();

        getline(s, str, ',');

        if (str == "#")
        {
            node->left = NULL;
        }
        else
        {
            TreeNode<int> *leftnode = new TreeNode<int>(stoi(str));
            node->left = leftnode;
            q.push(leftnode);
        }

        getline(s, str, ',');

        if (str == "#")
        {
            node->right = NULL;
        }
        else
        {
            TreeNode<int> *rightnode = new TreeNode<int>(stoi(str));
            node->right = rightnode;
            q.push(rightnode);
        }
    }
    return root;
}
