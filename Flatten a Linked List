/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */

Node* merge(Node* a, Node* b)
{
	if (!a) return b;
	if (!b) return a;
	Node* temp = new Node(0);

	Node* res = temp; 
	while (a && b)
	{
		if (a->data < b->data)
		{
			temp->child = a;
			temp = temp->child;
			a = a->child;
		}
		else
		{
			temp->child = b;
			temp = temp->child;
			b = b->child;
		}
	}
	if (a) temp->child = a;
	if (b) temp->child = b;
	return res->child;
}
Node* flattenLinkedList(Node* head) 
{
	if (!head) return head;

	Node* cur = head, *right = head->next;
	cur->next = NULL;
	right = flattenLinkedList(right);
	head = merge(cur, right);
	return head;
	// Write your code here
}
