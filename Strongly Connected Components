#include<bits/stdc++.h>
void dfs(int node, vector<int> &vis, stack<int> &st, vector<int> adj[])
{
    vis[node] = 1;

    for (auto it: adj[node])
    {
        if (!vis[it]) dfs(it, vis, st, adj);
    }

    st.push(node);
}
void dfs2(int node, vector<int> &vis, vector<int> adjT[], vector<int> &row)
{
    vis[node] = 1;

    for (auto it: adjT[node])
    {
        if (!vis[it]) dfs2(it, vis, adjT, row);
    }

    row.push_back(node);
}
vector<vector<int>> stronglyConnectedComponents(int n, vector<vector<int>> &edges)
{
    vector<int> adj[n], adjT[n];

    for (auto it: edges)
    {
        adj[it[0]].push_back(it[1]);
    }

    vector<int> vis(n, 0);
    stack<int> st;

    for (int i = 0; i < n; i++) {
        if (!vis[i])
        dfs(i, vis, st, adj);
    }

    for (int i = 0; i < n; i++)
    {
        vis[i] = 0;
        for (auto it: adj[i])
        {
            adjT[it].push_back(i);
        }
    }

    vector<vector<int>> ans;

    while (!st.empty())
    {
        int node = st.top();
        st.pop();
        vector<int> row;
        if (!vis[node])
        {
            dfs2(node, vis, adjT, row);
        }
        ans.push_back(row);
    }
    return ans;
    // Write your code here.
}
