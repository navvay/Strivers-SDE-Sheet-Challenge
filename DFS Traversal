void dfs(vector<int> adj[], vector<int> &vis, int node, vector<int> &row)
{
    vis[node] = 1;
    row.push_back(node);
    for (auto it: adj[node])
    {
        if (!vis[it])
        dfs(adj, vis, it, row);
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    vector<int> adj[V];
    for (auto it: edges)
    {
        adj[it[0]].push_back(it[1]);
        adj[it[1]].push_back(it[0]);
    }
    vector<int> vis(V, 0);
    vector<vector<int>> ans;
    for (int i = 0; i < V; i++)
    {
        if (!vis[i]) {
            vector<int> row;
            dfs(adj, vis, i, row);
            ans.push_back(row);
        }
    }
    return ans;
    // Write your code here
}
