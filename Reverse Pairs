#include <bits/stdc++.h> 
void merge(vector<int> &arr, int low, int mid, int high)
{
	vector<int> temp;

	int left = low, right = mid + 1;
	while (left <= mid && right <= high)
	{
		if (arr[left] < arr[right]) {
			temp.push_back(arr[left++]);
		}
		else {
			temp.push_back(arr[right++]);
		}
	}

	while (left <= mid)
	{
		temp.push_back(arr[left++]);
	}

	while (right <= high)
	{
		temp.push_back(arr[right++]);
	}

    for (int i = low; i <= high; i++) {
	    arr[i] = temp[i - low];
    }
}
int find(vector<int> &arr, int low, int mid, int high)
{
	int cnt = 0;
	int right = mid + 1;
	while (low <= mid){
		while (right <= high && arr[low] > 2 * arr[right]) right++;
		low++;
		cnt += (right - mid - 1);
	}
	return cnt;
}
int mergeSort(vector<int> &arr, int low, int high)
{
	if (low >= high) return 0;

	int ans = 0;

	int mid = (low + high) / 2;

	ans += mergeSort(arr, low, mid);
	ans += mergeSort(arr, mid + 1, high);
	ans += find(arr, low, mid, high);
	
	merge(arr, low, mid, high);

	return ans;
}
int reversePairs(vector<int> &arr, int n){
	return mergeSort(arr, 0, n-1);
	// Write your code here.	
}
