#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
bool isLeaf(TreeNode<int>* node)
{
    return (!node->left && !node->right);
}
void left(TreeNode<int>* root, vector<int> &ans)
{
    ans.push_back(root->data);

    TreeNode<int>* temp = root->left;

    while (temp)
    {
        if (!isLeaf(temp)) ans.push_back(temp->data);
        if (temp->left) temp = temp->left;
        else temp = temp->right;
    }
}
void right(TreeNode<int>* root, vector<int> &ans)
{
    vector<int> tmp;

    TreeNode<int>* temp = root->right;

    while (temp)
    {
        if (!isLeaf(temp)) tmp.push_back(temp->data);
        if (temp->right) temp = temp->right;
        else temp = temp->left;
    }

    for (int i = tmp.size() - 1; i >= 0; i--) ans.push_back(tmp[i]);
}

void leaves(TreeNode<int>* node, vector<int> &ans)
{
    if (!node) return;
    leaves(node->left, ans);
    if (isLeaf(node)) ans.push_back(node->data);
    leaves(node->right, ans);
}
vector<int> traverseBoundary(TreeNode<int>* root){
    if (isLeaf(root)) return {root->data};
    vector<int> ans;

    left(root, ans);
    leaves(root, ans);
    right(root, ans);

    return ans;
    // Write your code here.
}
