#include<bits/stdc++.h>
bool dfs(vector<int> adj[], vector<int> &vis, vector<int> &path, int node)
{
  vis[node] = 1;
  path[node] = 1;
  for (auto it: adj[node])
  {
    if (!vis[it]) {
      if (dfs(adj, vis, path, it)) return true;
    }
    else if (path[it]) return true;
  }
  path[node] = 0;
  return false;
}

int detectCycleInDirectedGraph(int n, vector<pair<int, int>> &edges) {
  // Write your code here.
  vector<int> adj[n + 1];
  vector<int> indeg(n+1, 0);
  for (auto it : edges) {
    adj[it.first].push_back(it.second);
    indeg[it.second]++;
  }
  //dfs
  /*  vector<int> path(n+1, 0), vis(n+1, 0);

    for (int i = 1; i <= n; i++)
    {
      if (!vis[i]) {
        if (dfs(adj, vis, path, i)) return true;
      }
    }

    return false;
    */
  //bfs
  queue<int> q;
  for (int i = 1; i <= n; i++)
  {
    if (indeg[i] == 0)
    q.push(i);
  }
  int c = 0;
  while (!q.empty())
  {
    int node = q.front();
    q.pop();
    c++;
    for (auto it: adj[node])
    {
      indeg[it]--;
      if (indeg[it] == 0)
      q.push(it);
    }
  }
  return !(c == n);
}
